<%- include("../layouts/header") %>
<header class="header_area sticky-header">
    <div class="main_menu">
<nav class="navbar navbar-expand-lg navbar-light main_box">
    <div class="container">
        
        <a class="navbar-brand logo_h" href="index"><img src="img/logo.png" alt=""></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
         aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        
        <div class="collapse navbar-collapse offset" id="navbarSupportedContent">
            <ul class="nav navbar-nav menu_nav ml-auto">
                <li class="nav-item "><a class="nav-link" href="/">Home</a></li>
                <li class="nav-item submenu dropdown">
                    <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                     aria-expanded="false">Shop</a>
                    <ul class="dropdown-menu">
                        <li class="nav-item"><a class="nav-link" href="shop">Shop Category</a></li>
                        <li class="nav-item"><a class="nav-link" href="checkout">Product Checkout</a></li>
                        <li class="nav-item"><a class="nav-link" href="cart">Shopping Cart</a></li>
                    </ul>
                </li>
                <li class="nav-item submenu dropdown active">
                    <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                     aria-expanded="false">Account</a>
                    <ul class="dropdown-menu">
                        <li class="nav-item"><a class="nav-link" href="account">Account</a></li>
                    </ul>
                </li>
                <li class="nav-item submenu dropdown">
                    <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                     aria-expanded="false">Pages</a>
                    <ul class="dropdown-menu">
                        <% if (user) { %>
                            <li class="nav-item"><a class="nav-link" href="#">Welcome, <%= user.name %>!</a></li>
                            <li class="nav-item"><a class="nav-link" href="logout">Logout</a></li>
                        <% } else { %>
                            <li class="nav-item"><a class="nav-link" href="login">Login</a></li>
                        <% } %>
                    </ul>
                </li>
                <li class="nav-item"><a class="nav-link" href="contact">Contact</a></li>
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li class="nav-item"><a href="/cart" class="cart"><span class="ti-bag"></span></a></li>
                <li class="nav-item">
                    <button class="search"><span class="lnr lnr-magnifier" id="search"></span></button>
                </li>
            </ul>
        </div>
    </div>
</nav>
</div>
<div class="search_input" id="search_input_box">
    <div class="container">
        <form class="d-flex justify-content-between">
            <input type="text" class="form-control" id="search_input" placeholder="Search Here">
            <button type="submit" class="btn"></button>
            <span class="lnr lnr-cross" id="close_search" title="Close Search"></span>
        </form>
    </div>
</div>
</header>


<section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
            <div class="col-first">
                <h1>ACCOUNT</h1>
                <nav class="d-flex align-items-center">
                    <a href="/account">Account<span class="lnr lnr-arrow-right"></span></a>
                    <a href="/view-orders">Orders</a>
                </nav>
            </div>
        </div>
    </div>
</section>

<div class="container my-5">
    <% if (order && order.length > 0) { %>
        <% order.forEach(order => { %>
            <div class="order-card card border-0 shadow mb-4 rounded-lg">
                <div class="card-header py-4 bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">Order Placed: <strong><%= new Date(order.date).toLocaleDateString() %></strong></h6>
                            <p class="mb-0 small">Order ID: <strong>#<%= order.orderId %></strong></p>
                        </div>
                        <div class="order-total">
                            <h6 class="mb-1">Total: <strong>&#8377;<%= order.totalPrice.toFixed(2) %></strong></h6>
                        </div>
                    </div>
                </div>
                <br><br>
                <div class="card-body">
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div class="table-responsive">
                                <table class="table mt-2">
                                    <thead class="text-center">
                                        <tr>
                                            <th scope="col">Image</th>
                                            <th scope="col">Name</th>
                                            <th scope="col">Category</th>
                                            <th scope="col">Quantity</th>
                                            <th scope="col">Price</th>
                                            <th scope="col">Status</th>
                                            <th scope="col">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% order.items.forEach(function(item) { %>
                                            <tr>
                                                <td><img src="/productimages/<%= item.image %>" alt="<%= item.productName %>" class="img-fluid" style="max-width: 100px;"></td>
                                                <td><%= item.productName %></td>
                                                <td><%= item.categoryName %></td>
                                                <td><%= item.quantity %></td>
                                                <td><%= (item.quantity * (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price)).toFixed(2) %></td>
                                                <td class="<%= item.itemStatus === 'Cancelled' ? 'text-danger' : item.itemStatus === 'Delivered' ? 'text-success' : item.itemStatus === 'Returned' ? 'text-success' :  item.itemStatus === 'Return Pending' ? 'text-primary' : '' %>"><%= item.itemStatus %></td>
                                                <td>
                                                    <% if ((item.itemStatus !== 'Cancelled' && item.itemStatus !== 'Delivered' && item.itemStatus !== 'Returned' && item.itemStatus !== 'Return Pending') 
                                                        && !(order.paymentMethod === 'razorpay' && order.paymentStatus === 'Pending')) { %>
                                                        <button type="button" class="btn btn-sm btn-cancel" onclick="confirmCancelOrder('<%= item.productId %>', '<%= order._id %>')">
                                                            <i class="fa fa-times"></i> Cancel
                                                        </button>
                                                    <% } else if (item.itemStatus === 'Delivered') { %>
                                                        <button type="button" class="btn btn-sm btn-return" onclick="showReturnModal('<%= item.productId %>', '<%= order._id %>')">
                                                            <i class="fa fa-undo"></i> Return
                                                        </button>
                                                    <% } %>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>                        
                            </div>
                        </div>
                    </div>
                    <br><br>

                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="font-weight-bold text-dark">Shipping Address</h6>
                            <p class="mt-2">
                                <%= order.address.name %><br>
                                +91 <%= order.address.phone %><br>
                                <%= order.address.house %> (H)<br>
                                <%= order.address.district %><br>
                                <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                            </p>

                            <h6 class="font-weight-bold text-dark mt-4">Payment Method</h6>
                            <p class="mt-2"><%= order.paymentMethod %></p>

                            <h6 class="font-weight-bold text-dark mt-4">Payment Status</h6>
                            <p class="mt-2"><%= order.paymentStatus %></p>
                            <% if (order.paymentMethod === 'razorpay' && order.paymentStatus === 'Pending') { %>
                                <button type="button" class="btn btn-sm btn-paynow mt-3" onclick="payNow('<%= order._id %>')">
                                    <i></i> Pay Now
                                </button>
                            <% } %>
                        </div>
                        
                        <div class="col-md-6 text-right">
                            <h6 class="font-weight-bold text-dark">Summary</h6>
                            <p class="font-weight-bolder text-dark">
                                 Total : <%= order.items.reduce((acc, item) => acc + (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price) * item.quantity, 0).toFixed(2) %><br>
                                Discount Price + Tax Price : <%= order.totalPrice.toFixed(2) %><br>
                            </p>
                        </div>
                    </div>

                    <% if (order.items.every(item => item.itemStatus === 'Delivered')) { %>
                        <div class="row ml-0"> 
                            <div class="col-md-12 text-right">
                                <button class="btn btn-sm btn-cancel mt-3" onclick="downloadInvoice(<%= JSON.stringify(order) %>)">
                                    <i class="mdi mdi-download"></i> Download Invoice
                                </button>
                                                            
                            </div>                        
                        </div>
                    <% } %>                      
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="text-center mt-5">
            <h5 class="text-secondary">You have no orders!</h5>
            <p class="small">checkout Shop</p>
            <a href="/shop" class="btn btn-lg btn-primary" style="background: linear-gradient(to right, #32CD32, #006400);">Shop Now</a>
        </div>
    <% } %>
</div>

<!-- Modal HTML -->
<div class="modal fade modal-custom" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Product</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="form-group">
                        <label for="returnReason" class="return-label">Reason for Return</label>
                        <select class="form-control" id="returnReason" required>
                            <option value="" disabled selected>Select a reason</option>
                            <option value="Damaged or Leaking Bottle">Damaged or Leaking Bottle</option>
                            <option value="Received a Different Scent">Received a Different Scent</option>
                            <option value="Broken Seal">Broken Seal</option>
                            <option value="Scent Not as Expected">Scent Not as Expected</option>
                            <option value="Received an Expired Product">Received an Expired Product</option>
                            <option value="Fake or Counterfeit Product">Fake or Counterfeit Product</option>
                            <option value="Allergic Reaction">Allergic Reaction</option>
                        </select>
                    </div>
                    <input type="hidden" id="returnProductId">
                    <input type="hidden" id="returnOrderId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-cancel" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-submit" form="returnForm">Submit Request</button>
            </div>
        </div>
    </div>
</div>

<div class="pagination-container mt-5">
    <ul class="pagination justify-content-center">
        <% if (currentPage > 1) { %>
            <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
            </li>
        <% } %>

        <% 
        // Calculate the start and end page numbers
        const maxPagesToShow = 10;
        let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
        let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

        // Adjust the start page if we are near the end
        if (endPage - startPage < maxPagesToShow - 1) {
            startPage = Math.max(1, endPage - maxPagesToShow + 1);
        }
        %>

        <% for(let i = startPage; i <= endPage; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
        <% } %>

        <% if (currentPage < totalPages) { %>
            <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
            </li>
        <% } %>
    </ul>
</div>


<%- include("../layouts/style") %>

<script>
 
 function downloadInvoice(order) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        doc.setFontSize(28);
        doc.setFont('Helvetica', 'bold');
        doc.text('Karma Invoice', 105, 20, null, null, 'center');
        
        doc.setLineWidth(0.5);
        doc.line(20, 25, 190, 25);
        
        doc.setFontSize(12);
        doc.setFont('Helvetica', 'normal');
        doc.text(`Order ID: #${order.orderId}`, 20, 40);
        doc.text(`Order Date: ${new Date(order.date).toLocaleDateString()}`, 20, 50);
        
        doc.setFont('Helvetica', 'bold');
        doc.text('Shipping Address:', 20, 60);
        
        doc.setFont('Helvetica', 'normal');
        doc.text(`${order.address.name}`, 20, 70);
        doc.text(`${order.address.house}`, 20, 80);
        doc.text(`${order.address.city}, ${order.address.state}`, 20, 90);
        doc.text(`${order.address.pincode}`, 20, 100);
        
        doc.setLineWidth(0.2);
        doc.line(20, 105, 190, 105);
        
        doc.autoTable({
            head: [['Product', 'Quantity', 'Price', 'Total']],
            body: order.items.map(item => [
                item.productName,
                item.quantity,
                `Rs: ${item.price.toFixed(2)}`,
                `Rs: ${(item.quantity * item.price).toFixed(2)}`
            ]),
            startY: 110,
            theme: 'striped',
            headStyles: {
                fillColor: [60, 141, 188]
            },
            styles: {
                cellPadding: 3,
                fontSize: 10
            }
        });
        
        const totalPrice = order.items
            .reduce((acc, item) => acc + item.quantity * item.price, 0)
            .toFixed(2);
        
        doc.setFontSize(14);
        doc.setFont('Helvetica', 'bold');
        doc.text(`Total Price: Rs: ${totalPrice}`, 20, doc.autoTable.previous.finalY + 20);
        
        doc.save(`karma Invoice.pdf`);
    }
    </script>

<!-- Cancel order -->
<script>
    function confirmCancelOrder(productId, orderId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            cancelOrder(productId, orderId);
        }
    });
}

function cancelOrder(productId, orderId) {
    axios.post('/cancel-order', { productId, orderId })
        .then(response => {
            if (response.data.success) {
                Swal.fire(
                    'Cancelled!',
                    'Your order item has been cancelled.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    response.data.message || 'There was an error cancelling your order item.',
                    'error'
                );
            }
        })
        .catch(error => {
            console.error('There was an error cancelling the order item:', error);
            Swal.fire(
                'Error!',
                'There was an error cancelling your order item.',
                'error'
            );
        });
}

</script>

<!-- Return Product -->
<script>
      function showReturnModal(productId, orderId) {
        $('#returnProductId').val(productId);
        $('#returnOrderId').val(orderId);
        $('#returnModal').modal('show');
    }

    function submitReturnRequest() {
    const productId = document.getElementById('returnProductId').value;
    const orderId = document.getElementById('returnOrderId').value;
    const reason = document.getElementById('returnReason').value;

    if (!reason) {
        Swal.fire(
            'Error!',
            'Please select a reason for the return.',
            'error'
        );
        return;
    }

    axios.post('/return-product', { productId, orderId, reason })
        .then(response => {
            if (response.data.success) {
                Swal.fire(
                    'Success!',
                    response.data.message,
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    response.data.message || 'There was an error submitting your return request.',
                    'error'
                );
            }
        })
        .catch(error => {
            console.error('There was an error submitting the return request:', error);
            Swal.fire(
                'Error!',
                'There was an error submitting your return request.',
                'error'
            );
        });
}

document.getElementById('returnForm').addEventListener('submit', function(event) {
    event.preventDefault();
    submitReturnRequest();
});

</script>

<!-- Pay Now -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    async function payNow(orderId) {
        try {
            const response = await axios.post('/payNow', { orderId });

            if (response.data.success) {
                var options = {
                    key: response.data.key,
                    amount: response.data.amount,
                    currency: "INR",
                    name: 'KARMA',
                    description: "Payment for order",
                    order_id: response.data.razorpayOrderId,
                    handler: async function(response) {
                        try {
                            const updateResponse = await axios.post('/update-orderstatus', {
                                orderId: orderId,
                                paymentId: response.razorpay_payment_id,
                                signature: response.razorpay_signature
                            });

                            if (updateResponse.data.success) {
                                location.reload();
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: updateResponse.data.message || 'Failed to update order status.',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            console.error('Error updating order status:', error);
                        }
                    },
                    prefill: {
                        name: response.data.name,
                        email: response.data.email,
                        contact: response.data.phone
                    },
                    notes: {
                        address: response.data.address
                    },
                    theme: {
                        color: "#FFFF00"
                    },
                };

                var rzp1 = new Razorpay(options);
                rzp1.open();
            } else {
                Swal.fire({
                    title: 'Oops...',
                    text: response.data.message || 'Something went wrong!'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Oops...',
                text: error.response?.data?.message || 'Something went wrong!'
            });
        }
    }
</script>

 

 

 