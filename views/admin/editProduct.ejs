<%- include("../layoutsAdmin/adminheader") %>
<%- include("../layoutsAdmin/adminSideBarhead") %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="page-header pt-5">
      <h3 class="page-title">
        <span class="page-title-icon btn-gradient-primary text-white mr-2">
          <i class="mdi mdi-cube-outline menu-icon"></i>
        </span>Edit Product
      </h3>
      <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
          <li class="breadcrumb-item active" aria-current="page">
            <span></span>
            <button class="btn btn-outline-dark" onclick="location.href='/admin/products'">Back to Products</button>
          </li>
        </ul>
      </nav>
    </div>

    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body"> 
          <form id="productForm" enctype="multipart/form-data">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group row">
                  <div class="col-md-4">
                    <label for="productName">Product Name</label>
                    <input type="text" class="form-control" id="productName" placeholder="Enter product name" name="productName" value="<%= productData.productName %>">
                    <small id="productNameError" class="text-danger"></small>
                  </div>
                  <div class="col-md-4">
                    <label for="quantity">Stock</label>
                    <input type="number" class="form-control" id="quantity" placeholder="Quantity" min="0" name="quantity" value="<%= productData.stock %>" required>
                    <small id="stockError" class="text-danger"></small>
                </div>
                  
                </div>
                
                <div class="form-group">
                  <label for="brand">Brand</label>
                  <select class="form-control" id="brand" name="brands">
                    <option value="" disabled>Select brand</option>
                    <% brandsData.forEach(brands => { %>
                      <option value="<%= brands._id %>" <%= brands._id.toString() === productData.brand._id.toString() ? 'selected' : '' %>><%= brands.brandsName %></option>
                    <% }); %>
                  </select>
                  <small id="brandError" class="text-danger"></small>
                </div>

                <div class="form-group">
                  <label for="category">Category</label>
                  <select class="form-control" id="category" name="category">
                    <option value="" disabled>Select category</option>
                    <% categoryData.forEach(category => { %>
                      <option value="<%= category._id %>" <%= category._id.toString() === productData.category._id.toString() ? 'selected' : '' %>><%= category.categoryName %></option>
                    <% }); %>
                  </select>
                  <small id="categoryError" class="text-danger"></small>
                </div>

                <div class="col-md-4">
                  <label for="price">Price</label>
                  <input type="number" class="form-control" id="price" placeholder="Price" name="price" min="0" value="<%= productData.price %>">
                  <small id="priceError" class="text-danger"></small>
                </div>
                
                <div class="form-group">
                  <label for="gender">Gender</label>
                  <select class="form-control" id="gender" name="gender">
                    <option value="male" <%= productData.gender === 'male' ? 'selected' : '' %>>Male</option>
                    <option value="female" <%= productData.gender === 'female' ? 'selected' : '' %>>Female</option>
                    <option value="unisex" <%= productData.gender === 'unisex' ? 'selected' : '' %>>Unisex</option>
                  </select>
                  <small id="genderError" class="text-danger"></small>
                </div>
              </div>

              <div class="col-md-6">
                <div class="form-group">
                  <label for="description">Description</label>
                  <textarea class="form-control" id="description" name="description" rows="4"><%= productData.productDec %></textarea>
                  <small id="descriptionError" class="text-danger"></small>
                </div>

                <div class="form-group">
                  <label>Product Images</label>
                  <div class="row">
                    <div class="col-md-4">
                      <div class="image-upload-wrapper">
                        <label for="image1" class="image-upload-label">
                          <div class="image-placeholder">
                            <i class="mdi mdi-upload"></i>
                            <span>Upload Image</span>
                          </div>
                        </label>
                        <input type="file" class="image-upload-input" id="image1" name="image1" accept="image/*">
                        <img id="preview1" src="/productimages/<%= productData.image[0] %>" alt="Preview" style="width: 100px; height: auto;">
                        <input type="hidden" name="existingImage1" value="<%= productData.image[0] %>">
                        <small id="imageError1" class="text-danger"></small>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="image-upload-wrapper">
                        <label for="image2" class="image-upload-label">
                          <div class="image-placeholder">
                            <i class="mdi mdi-upload"></i>
                            <span>Upload Image</span>
                          </div>
                        </label>
                        <input type="file" class="image-upload-input" id="image2" name="image2" accept="image/*">
                        <img id="preview2" src="/productimages/<%= productData.image[1] %>" alt="Preview" style="width: 100px; height: auto;">
                        <input type="hidden" name="existingImage2" value="<%= productData.image[1] %>">
                        <small id="imageError2" class="text-danger"></small>

                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="image-upload-wrapper">
                        <label for="image3" class="image-upload-label">
                          <div class="image-placeholder">
                            <i class="mdi mdi-upload"></i>
                            <span>Upload Image</span>
                          </div>
                        </label>
                        <input type="file" class="image-upload-input" id="image3" name="image3" accept="image/*">
                        <img id="preview3" src="/productimages/<%= productData.image[2] %>" alt="Preview" style="width: 100px; height: auto;">
                        <input type="hidden" name="existingImage3" value="<%= productData.image[2] %>">
                        <small id="imageError3" class="text-danger"></small>
                      </div>
                    </div>
                  </div>
                </div>

                <button type="button" class="btn btn-success mr-2" id="saveChangesButton">Save Changes</button>
                <a href="/admin/products" class="btn btn-danger">Cancel</a>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include("../layoutsAdmin/adminfooter") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="img-container">
          <img id="modalImage" src="" alt="Image for cropping">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
      </div>
    </div>
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productNameInput = document.getElementById('productName');
    const productNameError = document.getElementById('productNameError');
    const priceInput = document.getElementById('price');
    const priceError = document.getElementById('priceError');
    const stockInput = document.getElementById('quantity');
    const stockError = document.getElementById('stockError');

    const form = document.getElementById('productForm');
    const saveChangesButton = document.getElementById('saveChangesButton');
    let cropper;
    const imageInputs = document.querySelectorAll('.image-upload-input');
    const modalImage = document.getElementById('modalImage');
    const cropButton = document.getElementById('cropButton');
    const cropperModal = $('#cropperModal');
    let currentInput = null;

    // Real-time validation for product name
    productNameInput.addEventListener('input', () => {
      const cleanedValue = productNameInput.value.replace(/[./*+-]/g, '');
      if (productNameInput.value !== cleanedValue) {
        productNameInput.value = cleanedValue;
        productNameError.textContent = 'Product name cannot contain dots, slashes, stars, minus, or plus symbols.';
      } else if (productNameInput.value.startsWith(' ')) {
        productNameInput.value = productNameInput.value.trimStart();
        productNameError.textContent = 'Product name cannot start with a space.';
      } else {
        productNameError.textContent = '';
      }
    });

    // Real-time validation for stock
    stockInput.addEventListener('input', () => {
      if (stockInput.value < 0) {
        stockError.textContent = 'Stock cannot be negative.';
        stockInput.value = '';  // Clear the input if it's negative
      } else {
        stockError.textContent = '';  // Clear the error message if valid
      }
    });

    // Function to validate form fields
    function validateForm() {
      let valid = true;
      productNameError.textContent = '';
      priceError.textContent = '';
      stockError.textContent = '';

      // Product Name Validation
      const productName = productNameInput.value.trim();
      if (productName === '') {
        productNameError.textContent = 'Product name cannot be empty.';
        valid = false;
      } else if (productName.startsWith(' ')) {
        productNameError.textContent = 'Product name cannot start with a space.';
        valid = false;
      }

      // Price Validation
      const priceValue = parseFloat(priceInput.value);
      if (isNaN(priceValue) || priceValue < 0) {
        priceError.textContent = 'Please enter a valid price (must be a positive number).';
        valid = false;
      }

      // Stock Validation
      const stockValue = parseInt(stockInput.value, 10);
      if (isNaN(stockValue) || stockValue < 0) {
        stockError.textContent = 'Stock cannot be negative.';
        valid = false;
      }

      return valid;
    }

    // Save Changes button click event
    saveChangesButton.addEventListener('click', async () => {
      if (!validateForm()) {
        return; // Prevent form submission if validation fails
      }

      const formData = new FormData(form);

      // Append cropped images to formData
      imageInputs.forEach((input, index) => {
        if (input.getAttribute('data-cropped-image')) {
          const dataUrl = input.getAttribute('data-cropped-image');
          const blob = dataURItoBlob(dataUrl);
          formData.append(`image${index + 1}`, blob, `cropped_image${index + 1}.png`);
        }
      });

      const response = await fetch(`/admin/editProducts/?id=<%= productData._id %>`, {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        window.location.href = '/admin/products';
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Please select an image',
        });
        console.error('Failed to update product');
      }
    });

    // Cropper.js logic for image cropping
    imageInputs.forEach((input) => {
      input.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            modalImage.src = e.target.result;
            cropperModal.modal('show');
            if (cropper) {
              cropper.destroy();
            }
            cropper = new Cropper(modalImage, {
              aspectRatio: 1,
              viewMode: 1,
              autoCropArea: 1,
            });
            currentInput = input;
          };
          reader.readAsDataURL(file);
        }
      });
    });

    cropButton.addEventListener('click', () => {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas();
        const dataUrl = canvas.toDataURL();
        if (currentInput) {
          const index = Array.from(imageInputs).indexOf(currentInput) + 1; // Determine which image input was used
          const previewImage = document.getElementById('preview' + index);
          previewImage.src = dataUrl;
          currentInput.setAttribute('data-cropped-image', dataUrl); // Store cropped image data in input
          currentInput.value = ''; // Clear input value to allow re-upload
        }
        cropperModal.modal('hide');
      }
    });

    function dataURItoBlob(dataURI) {
      const byteString = atob(dataURI.split(',')[1]);
      const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
      const ab = new ArrayBuffer(byteString.length);
      const ia = new Uint8Array(ab);
      for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      return new Blob([ab], { type: mimeString });
    }
  });
</script>
